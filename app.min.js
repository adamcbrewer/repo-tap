var https=require("https"),http=require("http"),express=require("express"),fs=require("fs"),handlebars=require("handlebars"),config=require("./config.js"),Client=require("./models/client.js"),server=express(),serverInstance=http.createServer(server),io=require("socket.io").listen(serverInstance),App={_loop:!1,totalTimeoutRequests:0,totalRepoRequests:0,commits:[],clients:[],clientCount:0,init:function(){this._createTimer()},createClient:function(e){this.clients.push(e);this.clientCount++;console.log("\n-- The connected clients are: "+this.clientCount+"\n");this.checkForCommits(e)},destroyClient:function(e){},checkForCommits:function(e){this.commits.length&&this.render("partials/commit.tmpl",this.commits,e)},render:function(e,t,n){var r=this.loadTemplate(e);template=handlebars.compile(r),commits=[],numCommits=t.length,i=0,that=this;for(i;i<numCommits;i++)commits.push(template(t[i]));n?this.sendCommitsToClient({commits:commits.reverse()},n):this.clients.forEach(function(e,t){that.sendCommitsToClient({commits:commits.reverse()},e)})},loadTemplate:function(e){var t=fs.readFileSync("./view/"+e,"utf8",function(e,t){if(e)throw e;return t});return t},getAll:function(){},sendCommitsToClient:function(e,t){t.socket.emit("all changesets",{results:e})},fetch:function(e){e=e||{};var t=this,n=e.repo;opts={host:"api.bitbucket.org",port:443,method:"GET",path:"/1.0/repositories/"+e.repo+"/changesets?limit="+1,auth:config.auth,headers:{"content-type":"application/json"}};https.request(opts,function(e){e.setEncoding("utf8");var r="",i={};e.on("data",function(e){r+=e}).on("end",function(){t.stackCommits(r,n)})}).end()},stackCommits:function(e,t){var n=JSON.parse(e),r=n.changesets,i=this,s=null;r.forEach(function(e,n){s=i.checkIfChangesetExists(e);if(s===!1){e._key=t;i.commits.push(e);i.render("partials/commit.tmpl",[e])}})},checkIfChangesetExists:function(e){var t=!1;this.commits.forEach(function(n,r){console.log("Checking changeset "+n.node+" against "+e.node+" || "+n._key);if(n.node==e.node){t=!0;console.log('Changeset "'+n.node+'" already exists for '+n._key);return t}});return t},_timerFetch:function(){var e=config.repos.length,t=0;this.totalTimeoutRequests++;console.log("\n-- Total timeout requests: "+this.totalTimeoutRequests+"\n");for(t;t<e;t++){console.log("getting: "+config.repos[t]);this.totalRepoRequests++;App.fetch({repo:config.repos[t]})}console.log("\n-- Total repository requests: "+this.totalRepoRequests+"\n")},_createTimer:function(){var e=2e4,t=this;console.log("LOG: Fetching first set of results");this._timerFetch();this._loop&&setInterval(function(){t._timerFetch.call(t)},e)}};serverInstance.listen(config.serverPort);var publicDir=__dirname+"/public",assetsDir=publicDir+"/assets";server.use("/assets",express.static(assetsDir));server.get("/*",function(e,t){var n=!1,r=App.loadTemplate("layout.tmpl"),i=handlebars.compile(r),s=i({basePath:config.basePath,debug:n});App.getAll();t.send(s)});io.sockets.on("connection",function(e){e.emit("server msg",{msg:"Socket open"});App.createClient(new Client({socket:e}));e.on("disconnect",function(){App.destroyClient(e.id)})});App.init();